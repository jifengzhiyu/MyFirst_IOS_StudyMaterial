

第二天
一. 创建项目
1. 配置一些属性 (bundleID / 最低编译版本)
2. 导入素材
3. 删除 SB, 使用 UICollectionViewController 作为根控制器--> 删除 Plist 中键值来删掉 SB --> UICollectionViewController 创建的时候需要制定布局方式(重写 init 方法)
4. 自定义导航栏--> 继承自 NavController --> 重写initialize统一设置背景
5. 图像拉伸的问题 --> 可以使用代码进行图像拉伸(分类/工具) --> 也可以使用图像化界面设置

二. 设置右边导航栏
1. 添加了一个 UIBarButtonItem 的分类 --> 通过类方法快速创建带有高亮图像的item
2. 为了调整 item 间距 --> search.customView --> UIButton 可以拿到UIBarButtonItem的自定义视图更改

三. 设置左边导航栏
1. Logo --> 设置不需要图片渲染 --> 不需要发生交互 --> enable
2. 自定义 Nav Item 的视图 成为公用类--> 可以方便 UIBarButtonItem 的创建
3. 实现NavItem 按钮的点击 --> Target-Action 模式 --> 不提供属性, 提供方法, 然后再类的内容进行实现

四. 点击分类加载分类控制器
1. 呈现一个 Popover --> 需要创建内容控制器 --> categoryVC
2. 自定义了一个 view, 专门呈现双表格 --> 为了防止视图因为大小改变而发生的控件被压缩 --> self.autoresizingMask = UIViewAutoresizingNone
3. 数据转模型 --> 第三方框架


第三天
一. 分类按钮点击
1. 区别双表格 --> 通过属性来区分 --> 为了显示不同的数据 --> 需要一个选中左边的属性
2. 完善双表格的数据显示  --> 1)设置 cell 的背景  --> 2)cell 的封装

二. 区域按钮点击
1. 使用 Xib 进行布局(nav) --> 图像和文字看看是否能用一个按钮搞定
2. 点击导航栏按钮弹出城市控制器 --> 父子控制器 --> 可以使用根控制器去显示界面
3. 显示 TableView 的数据 --> 将城市分类的数据转模型, 然后显示
4. 设置了表格的索引列表及颜色 --> KVC 来查找 title 属性
5. 设置搜索框 --> 自动布局 --> 2种方式
6. 字典嵌套字典的转模型 --> 使用第三方框架的类方法
7. 实现实时搜索 --> 1. 重写属性的 set 方法,在此方法中去遍历数据
8. 搜索框的取消变中文 --> 通过遍历子视图, 来获取系统的控件, 然后更改 --> 更改搜索框的文字颜色
9. 发送城市选中的通知 --> cityVC, citySearchVC 两个控制器都可以发送选中的通知
10. 显示子区域数据 --> 1)在 homeVC 中接受到城市名称 2)从城市 plist 中遍历, 查护对应的城市 3)将城市模型的子区域数据, 逐层传递下拉菜单 4)完善下拉菜单的方法, 显示对应的数据

第四天
一. 导航栏的完善
1. 选中区域的通知
2. 设置排序 NavItem, 发送通知 --> 使用 for 循环 / TableView
3. 导航栏按钮选项位置发生变化 --> autoresizingMask属性

二. 团购 cell 的搭建
1. 使用 Xib进行界面搭建
2. 控制器中显示 cell --> 1)更改重用标识符 2)layout.itemSize 设置大小 3)注册 cell 4)更改 Cell 的数据源方法
3. 手动代码设置背景 --> 1)初始化完成方法 2)drawrect方法

三. 大众点评 SDK 继承
1. 下载 SDK 并继承 --> 1)创建 DPAPI 2)拼接参数 3)发送请求 4)请求成功和失败方法 5)iOS9网络适配
2. 数据转模型 --> 需要找到对应的 Key --> 转模型的时替换属性replacedKeyFromPropertyName
3. 显示团购 cell 的数据 --> 1)删除线:自定义 Label 2)新单的隐藏:日期格式化 3)价格的处理
4. 发送参数: 分类/区域 参数值 :1)发送左边数据 2)发送右边 3)左边的等于"全部分类"/"全部"

四.添加 AwesomeMenu
1. 创建AwesomeMenu , 需要中间按钮和周边按钮
2. 设置相关属性
3. 实现代理方法



第五天
一. 添加刷新控件
1. 添加控件 --> 一开始刷新 --> 一开始隐藏底部
2. 实现刷新方法 --> 成功6个 --> 失败4个
3. 通知时的刷新拥有下拉上移的效果 --> 刷新的地方调用[header beginRefreshing];

二. 团购详情
1. 右边网页 --> 1)ID 的截取处理 2)删除无用的 HTML 标签 3)进度指示器 4)背景颜色/内容偏移
2. 左边详情 --> 使用XIB 布局 1)Label 不需要全部约束 2)约束的比例关系
3. 数据转模型 --> 请求团购详情接口, 对模型数据重新赋值
4. 剩余日期的处理 --> 需要转换成 NSDate --> 调用日历对象的比较方法, 获取比较后的组件值 --> 根据不同情况来处理(截止日期太久远 / 截止日期为今天)

三. 抽取公用控制器
1. 仔细判别哪些是公用的方法和属性, 发现公用的部分可以抽取
2. 网络请求参数的传递 --> 通过父类的方法, 子类重写, 达到调用参数的目的
3. 抽取完毕要测试, 发现不太合适的地方微调 --> 首页已进入就刷新, 而搜索不需要



第六天
一. 收藏控制器
1. 创建数据库 --> FMDB 1)获取文件路径 2)创建数据库 3)创建表 --> 抽取成工具类
2. 创建收藏控制器 --> 需要一些方法 1)添加数据: NSData 归档需要遵守协议并实现方法 2)查询:一定要调用 next 方法 / intForColumn : 查询个数 / 查询个数起名字:count(*) AS deal_count
3. 收藏控制器的刷新方法 : 只需要上拉加载
4. 详情页面点击取消收藏 : 发送通知告诉收藏板块 重新加载数据

二. 批量删除
1. 设置右边导航栏按钮 --> 1)切换文字: item.title  2)切换左边的按钮个数 : self.navigationItem.leftBarButtonItems
2. 创建 item 的方法 --> 1)删除 item 初始化是不可用的  2)删除 item: 不能再遍历的时候进行删除或添加操作, 可以使用临时数组记录 3)使用代理传值, 用 bool 属性记录使用有打钩的模型数据, 循环完毕, 根据是否有打钩属性来设置删除 item 的可用

