#pragma mark - 一. 换肤

#pragma mark 1. 换肤的实际意义 (了解)
1. 换肤使用的场景: 换皮肤功能 / 日间夜间模式
2. 换什么 : 背景图片图标 / 文字颜色 / 背景颜色
3. 换肤其实是程序设计思想的一种具体实现.

#pragma mark 2. 换肤-简单版 (理解)

一. 简单的换肤
1. 只要在按钮点击中, 分别设置图像的image即可

二. 换肤的优化
1. 抽取公用方法 --> 省去垃圾代码
2. 首次启动就加载皮肤
3. 增加配置设置
    3.1 保存配置信息 --> 切换皮肤时, 保存
    3.2 读取配置信息 --> 开始加载时读取, 要测试默认值的时候, 最好删除程序重新运行


#pragma mark 3. 换肤-进阶版(掌握)
一. 换资源的配置
1. 一旦文件重名, 将来打包时就会丢失文件
2. 确保重名文件, 选中的是蓝色文件夹, 打包后, 就会有全部的文件了
3. 修改文件的路径(原路径失效, 测试时最好删除程序清空缓存再试)

二. 工具类的抽取--代码优化
1. 多控制器的简单实现: 只要开始时去读配置信息, 然后实现切换图像的方法即可 --> 代码可以抽取
2. 抽取的方法(场景分析):
    2.1 抽取父类, 对于界面内容多变的情况不太适用
    2.2 工具类, 对于界面内容多变的情况非常适用
    2.3 分类, 对于某个系统的某个控件扩充方法时使用
3. 需要抽取2个方法
    3.1 切换颜色的方法 --> 读取配置信息 --> 拼接文件名 --> 返回图像
    3.2 需要在设置界面, 保存皮肤设置的方法 --> 保存皮肤名即可

三. 工具类的性能优化
1. 注意偏好设置的读取是耗性能的(频繁读取硬盘), 所以应该保证只去读一次.
2. 如何保证代码只加载一次:
    2.1 多线程 --> dispatchOnce
    2.2 只调用一次的方法
/** load方法, 只要头文件参与了编译就会调用此方法 */
/** initialize, 类的实例创建时, 才会调用此方法*/

四. TabBar控制器的处理
1. 如果添加了TabBar控制器, 那么如果视图没有销毁, 在viewDidLoad皮肤只会加载一次, 不会随着设置的更新而更新
2. 此时需要放在在视图出现之前, 重新加载皮肤


#pragma mark 4. 换肤-高级版 (理解)
一. 颜色的获取
1. 增加一个plist列表, 来记录对应的标识符及颜色值
2. 增加工具类的方法, 来返回对应的颜色
3. 在工具方法中, 获取plist, 转换成字典, 获取对应的标识符的值, 截取字符串, 返回对应的颜色

二. 工具类性能优化
思路分析: 搞一个缓存池处理
//1. 获取plist列表
//2. 颜色转换(255,0,0,1 --> UIColor对象)
1. 创建一个static的可变字典
2. initialize中可变字典做初始化
3. initialize中加载颜色plist
4. 返回指定标识符所对应的颜色的方法中, 直接返回缓存字典的值
5. 在设置(保存)皮肤时, 需要重新调用加载颜色plist的方法, 来更新缓存字典

三. 补充
1. 颜色的宏定义文件
2. 将常量值, 设置成const的字符串, 保证开发者可以方便的输入常量


#pragma mark - 二. 内购

#pragma mark 1. 内购介绍(了解)
1. 通过苹果应用程序商店有三种主要赚钱的方式：
    1.1 直接收费（与国内大部分用户的消费习惯相悖）
    1.2 广告
    1.3 内购：应用程序本身的增值产品，游戏装备，应用程序中增值功能同样可以内购

2. 内购的五种产品类别
    2.1 非消耗品（Nonconsumable）一旦购买，终身拥有
    2.2 消耗品（Consumable），买了就用，用了就没
    暂不支持的3种
    2.3 免费订阅
    2.4 自动续费订阅
    2.5 非自动续费订阅


#pragma mark 2. 配置开发者账号(理解)
1. 进入开发者网站, 配置一个明确的Bundle ID的程序(如果以前有了,则不用创建)
    譬如: com.itheima.heima4in
2. 进入https://itunesconnect.apple.com/, 添加新应用程序, 并做相关的配置
3. 进入https://itunesconnect.apple.com/, 找到协议,税务和银行业务进行相关配置  --> CNAPS Code: 可以百度查询, 是银行号的一转转码形式
    配置了这一样, 苹果才能将钱打到你的账户上
4. 配置内购道具项: 应用程序-->功能--> 内购买项--> 按要求及流程添加道具
5. 再次回到程序的普通选项配置中 --> 找到App 内购买项目--> 添加需要上架的道具

将来添加时, 只需要不断执行4和5即可


#pragma mark 3. 内购代码实现(掌握)
1. 请求可售商品列表
    1.1 创建商品标识符的无序集
    1.2 创建商品请求对象
    1.3 设置代理 --> 老获取请求到的商品列表
    1.4 开始请求

2. 苹果会返回商品列表 --> 代理方法中返回的
    2.1 判断是否有无效的标识符
    2.2 获取并保存产品列表 (将来自己处理)
    2.3 刷新表格

3. 在tableView的选中方法中, 选择产品之后, 开票据凭证
    3.1 获取选中的商品
    3.2 开票据凭证

4. 进入交易队列 -->单例不需要alloc创建

5. 观察者对象监听支付流程 --> 一旦监听到购买行为时, 就会通过代理方法来返回相关信息

6. 观察者的代理方法来监听支付的状态

7. 添加恢复购买:按钮点击中, 增加恢复的方法即可

8. 购买完成以及恢复购买 , 客户端必须结束交易

9. 通知, 代理都是在视图出现时设置, 消失时取消


#pragma mark 4. 测试(掌握)
1. 只能在真机上进行测试
2. 需要添加沙箱技术测试人员
    2.1 https://itunesconnect.apple.com
    2.2 用户和职能
    2.3 选择沙箱技术测试人员, 然后添加
注意: 邮箱不要乱传, 尤其是不要添加已经是开发者账号的邮箱. 可以添加一些非正式的邮箱
3. 配置完成就可以调试了 --> 确保Bundle ID是正确的


#pragma mark - 三. 广告

#pragma mark 1. 系统广告的集成 (理解)
1. #import <iAd/iAd.h>
2. SB上拖拽一个控件
3. 实现代理, 去判断是否要调整位置/隐藏

